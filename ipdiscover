#!/bin/bash
function assert() {
    local message="$1"
    shift
    "$@"
    [ $? -eq 0 ] && return 0
    echo "$message" >&2
    exit 1
}

function macLookup() {
    local ip="$1" mac="$2" vendor

    vendor=$(curl -s "http://macvendors.co/api/$mac/pipe" | cut -d '|' -f 1)
    printf '%s %s %s\n' "$ip" "$mac" "$vendor"
}

assert "parallel command not found" which parallel > /dev/null
assert "curl command not found" which curl > /dev/null
assert "arp command not found" test -f /usr/sbin/arp > /dev/null

# This filter parses arp command output to extract IP and MAC addresses
FILTER='
# Convert uppercase hexadecimal characters to lowercase
y/ABCDEF/abcdef/

# Look for an IP and a MAC address on the same line and print them
s/\([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\).*\([0-9a-f]\{2\}:[0-9a-f]\{2\}:[0-9a-f]\{2\}:[0-9a-f]\{2\}:[0-9a-f]\{2\}:[0-9a-f]\{2\}\).*/\1 \2/p

# Everything else is ignored
d
'

# Run 253 shortest pings as possible in parallel, this will fill the ARP table
parallel -P 255 ping -q -w 1 ::: 192.168.0.{1..253} > /dev/null

# By default, ARP tables on Debian holds 512 entries up to 5 seconds, the
# previous commands should give us enough remaining time to read them
/usr/sbin/arp --numeric \
    | sed --expression="$FILTER" \
    | while read ip mac; do macLookup "$ip" "$mac"; done

